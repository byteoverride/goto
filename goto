#!/bin/sh

CONFIG_FILE="${HOME}/.config/goto/config"

# ANSI Colors and symbols
GREEN="\033[1;32m"
RED="\033[1;31m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
CYAN="\033[1;36m"
RESET="\033[0m"
CHECK="‚úÖ"
CROSS="‚ùå"
BULLET="üîπ"

# Disable colors/symbols if not writing to a terminal
if [ ! -t 1 ]; then
  GREEN=""
  RED=""
  YELLOW=""
  BLUE=""
  CYAN=""
  RESET=""
  CHECK=""
  CROSS=""
  BULLET="*"
fi

print_help() {
    printf "${CYAN}Usage:${RESET}\n"
    printf "  ${BULLET} ${YELLOW}goto <name>${RESET}            - Echo the path of the shortcut (used by shell wrapper to cd)\n"
    printf "  ${BULLET} ${YELLOW}goto -r <name> <path>${RESET}  - Register or update a shortcut\n"
    printf "  ${BULLET} ${YELLOW}goto -d <name>${RESET}         - Delete a shortcut\n"
    printf "  ${BULLET} ${YELLOW}goto -l${RESET}                - List all shortcuts\n"
    printf "  ${BULLET} ${YELLOW}goto -h${RESET}                - Show this help message\n"
}

ensure_config_file() {
    [ -d "$(dirname "$CONFIG_FILE")" ] || mkdir -p "$(dirname "$CONFIG_FILE")"
    [ -f "$CONFIG_FILE" ] || touch "$CONFIG_FILE"
}

validate_name() {
    case "$1" in
        *[!a-zA-Z0-9_-]*)
            printf "${RED}Error:${RESET} Invalid shortcut name '$1'.\n"
            printf "Only ${YELLOW}letters, numbers, underscores, and hyphens${RESET} are allowed.\n"
            exit 1
            ;;
    esac
}

register_shortcut() {
    name=$1
    path=$2
    validate_name "$name"
    ensure_config_file

    eval path="$path"  # Expand ~
    grep -v "^${name}|" "$CONFIG_FILE" > "${CONFIG_FILE}.tmp" 2>/dev/null
    mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"
    printf "%s|%s\n" "$name" "$path" >> "$CONFIG_FILE"
    printf "${GREEN}${CHECK} Registered:${RESET} '${YELLOW}%s${RESET}' ‚Üí ${CYAN}%s${RESET}\n" "$name" "$path"
}

delete_shortcut() {
    name=$1
    validate_name "$name"
    ensure_config_file

    if grep -q "^${name}|" "$CONFIG_FILE"; then
        grep -v "^${name}|" "$CONFIG_FILE" > "${CONFIG_FILE}.tmp" && mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"
        printf "${RED}${CROSS} Deleted:${RESET} Shortcut '${YELLOW}%s${RESET}' removed.\n" "$name"
    else
        printf "${RED}Shortcut '${name}' not found.${RESET}\n"
        exit 1
    fi
}

list_shortcuts() {
    ensure_config_file
    if [ ! -s "$CONFIG_FILE" ]; then
        printf "No shortcuts registered. Use 'goto -r <name> <path>' to add one.\n"
        return 1
    fi

    printf "Registered Shortcuts:\n\n"

    while IFS= read -r line; do
        name=$(printf "%s" "$line" | cut -d'|' -f1)
        path=$(printf "%s" "$line" | cut -d'|' -f2-)

        if [ -d "$path" ]; then
            status=""
        else
            status=" (missing)"
        fi

        # Print plain output
        printf "  %-15s ‚Üí %s%s\n" "$name" "$path" "$status"
    done < "$CONFIG_FILE"

    printf "\n"
}


resolve_shortcut() {
    name="$1"
    validate_name "$name"
    ensure_config_file
    path=$(grep "^${name}|" "$CONFIG_FILE" | cut -d'|' -f2-)

    if [ -n "$path" ]; then
        if [ -d "$path" ]; then
            printf "%s\n" "$path"
        else
            printf "${RED}Error:${RESET} Path for shortcut '${YELLOW}%s${RESET}' does not exist: ${CYAN}%s${RESET}\n" "$name" "$path" >&2
            return 1
        fi
    else
        printf "${RED}Shortcut '${name}' not found.${RESET}\n" >&2
        return 1
    fi
}

# ==== Main Entry Point ====

case "$1" in
    -h|--help)
        print_help
        ;;
    -r)
        if [ $# -ne 3 ]; then
            printf "${RED}Usage:${RESET} goto -r <name> <path>\n"
            exit 1
        fi
        register_shortcut "$2" "$3"
        ;;
    -d)
        if [ $# -ne 2 ]; then
            printf "${RED}Usage:${RESET} goto -d <name>\n"
            exit 1
        fi
        delete_shortcut "$2"
        ;;
    -l)
        list_shortcuts
        ;;
    -*)
        printf "${RED}Unknown flag:${RESET} %s\n" "$1"
        print_help
        exit 1
        ;;
    "")
        printf "${RED}Missing shortcut name.${RESET} Use -l to list or -h for help.\n"
        exit 1
        ;;
    *)
        if [ $# -eq 1 ]; then
            resolve_shortcut "$1"
        else
            printf "${RED}Invalid usage.${RESET}\n"
            print_help
            exit 1
        fi
        ;;
esac
